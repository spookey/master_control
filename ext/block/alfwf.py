from datetime import datetime
from ext.snaps.plist import Plist

from lib.parse import PROGNAME
from lib.snips.files import base_loc
from lib.parse import collect_local

COMMAND = '''
$@ > /dev/null 2>&1
case $? in
  0) echo "ok";;
  *) echo "failed";;
esac
'''.strip()
INTERPRETER = '/usr/local/bin/python3'
ALFRED_TEMPLATE = dict(
    bundleid='de.der-beweis.code.master_control.alfred_workflow.autogen.bbq',
    category='Productivity',
    createdby='spky',
    description='autogenerated alfred workflow for master control',
    disabled=False,
    name='Master Control (autogenerated)',
    readme='master_control - alfred_workflow',
    version=datetime.utcnow().strftime('%Y.%m.%d-%H%M'),
    webaddress='www.der-beweis.de',
)


def _raw_object(uid, config, ptype='trigger.remote', version=1):
    return dict(
        config=config, uid=uid, version=version,
        type='alfred.workflow.{}'.format(ptype),
    )


def object_remote(uid, name):
    return _raw_object(
        uid, config=dict(
            argument='', argumenttype=0,
            triggerid=name, triggername=name,
            workflowonly=False
        ),
        ptype='trigger.remote', version=1
    )


def object_script(uid, script):
    return _raw_object(
        uid=uid, config=dict(
            concurrently=False,
            escaping=102,
            script=script,
            scriptargtype=1,
            scriptfile='',
            type=0,
        ), ptype='action.script', version=2
    )


def object_notification(uid, title, text):
    return _raw_object(
        uid=uid, config=dict(
            lastpathcomponent=False,
            onlyshowifquerypopulated=True,
            removeextension=False,
            text=text, title=title
        ), ptype='output.notification', version=1
    )


def object_arguments(uid, *, argument='', variables=dict()):
    return _raw_object(
        uid=uid, config=dict(
            argument=argument,
            variables=variables,
        ), ptype='utility.argument', version=1
    )


def object_keyword(uid, keyword, subtext):
    return _raw_object(
        uid=uid, config=dict(
            argumenttype=2,
            keyword=keyword,
            subtext=subtext,
            text=keyword.capitalize(),
            whitespace=False,
        ), ptype='input.keyword', version=1
    )


def connect(*targets):
    return list(dict(
        destinationuid=target,
        modifiers=0,
        modifiersubtext='',
        vitoclose=False,
    ) for target in targets)


def pull_elems():
    for module, actions in sorted(collect_local().items()):
        for ident, _, _ in actions:
            for state, flag, sign in [('full', '-l', '+'), ('null', '', '-')]:
                yield (
                    'the_{}_{}_{}'.format(state, module, ident),
                    '{} {} {}'.format(module, ident, flag).strip(),
                    '{}{}_{}'.format(sign, module, ident),
                )


def generate():
    objects = [
        object_notification(
            'the_notification', title='{var:cmd}', text='{var:name} {query}'
        ),
        object_script(
            'the_script', script=COMMAND
        ),
        object_arguments(
            'the_main_arguments',
            argument='{interpreter} {command} {text}'.format(
                command=base_loc(PROGNAME),
                interpreter=INTERPRETER,
                text='{var:cmd}',
            ),
            variables=dict(name=PROGNAME),
        ),
    ]
    uidata = dict(
        the_notification=dict(xpos=720, ypos=65),
        the_script=dict(xpos=570, ypos=65),
        the_main_arguments=dict(xpos=500, ypos=95),
    )
    connections = dict(
        the_script=connect('the_notification'),
        the_main_arguments=connect('the_script'),
    )

    ypos = 10
    for uid, cmd, name in pull_elems():
        args = '{}_arguments'.format(uid)
        objects.append(object_arguments(args, variables=dict(cmd=cmd)))
        uidata[args] = dict(xpos=200, ypos=ypos + 85)
        connections[args] = connect('the_main_arguments')

        remo = '{}_remote'.format(uid)
        objects.append(object_remote(remo, name))
        uidata[remo] = dict(xpos=10, ypos=ypos)
        connections[remo] = connect(args)

        keyw = '{}_keyword'.format(uid)
        objects.append(object_keyword(keyw, keyword=name, subtext=''))
        uidata[keyw] = dict(xpos=10, ypos=ypos + 115)
        connections[keyw] = connect(args)

        ypos += 230

    return connections, objects, uidata


def gen_alfwf():
    plist = Plist()
    connections, objects, uidata = generate()
    output = ALFRED_TEMPLATE
    output.update(
        connections=connections,
        objects=objects,
        uidata=uidata,
    )
    return plist(output)
